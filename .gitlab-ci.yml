image: docker:stable

stages:
    - New Version
    - Build e Push image
    - Documentation

variables:
    HTTP_ENV: "https://gitlab.com/maurosoft1973-docker/alpine-variable/-/raw/master/.env"
    HTTP_SETTINGS: "https://gitlab.com/maurosoft1973-docker/alpine-variable/-/raw/master/settings.sh"

before_script:
    - apk add bash curl
    - /bin/bash
    - echo "Get Environment Variable from .env.alpine"
    - wget -q $HTTP_ENV -O ./.env
    - set -a;
    - source ./.env;
    - set +a;
    - export JOB_ALPINE_VERSION=${CI_ALPINE_VERSION:-"$ALPINE_VERSION"}
    - export JOB_ALPINE_VERSION_DATE=${CI_ALPINE_VERSION_DATE:-"$ALPINE_VERSION_DATE"}
    - export JOB_ALPINE_RELEASE=${CI_ALPINE_RELEASE:-"$ALPINE_RELEASE"}

new version:
    image: maurosoft1973/alpine
    stage: New Version
    variables:
        GEOIPUPDATE_ACCOUNT_ID: "$GEOIP_UPDATE_ACCOUNT_ID"
        GEOIPUPDATE_LICENSE_KEY: "$GEOIP_UPDATE_LICENSE_KEY"
        GEOIPUPDATE_EDITION_IDS: "$GEOIP_UPDATE_EDITION_IDS"
        TOKEN: "909913a22ff276a75756e3578391aa"
    only:
        - master
    except:
        - triggers
    script:
        - echo "AccountID $GEOIPUPDATE_ACCOUNT_ID" >> /etc/GeoIP.conf
        - echo "LicenseKey $GEOIPUPDATE_LICENSE_KEY" >> /etc/GeoIP.conf
        - echo "EditionIDs $GEOIPUPDATE_EDITION_IDS" >> /etc/GeoIP.conf
        - echo "PreserveFileTimes 1" >> /etc/GeoIP.conf
        - apk add -q --update bash wget file curl
        - wget "https://github.com/maxmind/geoipupdate/releases/download/v${MAXMIND_GEOIPUPDATE_VERSION}/geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64.tar.gz" -O ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64.tar.gz
        - tar zxvf ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64.tar.gz
        - chmod +x ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64/geoipupdate
        - ls -la ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64/
        - cat ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64/GeoIP.conf
        - ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64/geoipupdate -V
        - ./geoipupdate_${MAXMIND_GEOIPUPDATE_VERSION}_linux_amd64/geoipupdate -f /etc/GeoIP.conf -d /tmp
        - ls -la /tmp/
        - date -r /tmp/GeoLite2-City.mmdb +"%Y%m%d"
        #- curl -X POST -F token=$TOKEN -F "variables[TRIGGER_JOB]=job3" -F ref=master https://gitlab.com/api/v4/projects/21982737/trigger/pipeline

update readme:
    stage: Documentation
    variables:
        GITLAB_SSH_KEY: "$GITLAB_CI_SSH_KEY"
        DOCKERHUB_USERNAME: "$DOCKER_HUB_USER"
        DOCKERHUB_PASSWORD: "$DOCKER_HUB_PASSWORD"
        DOCKERHUB_REPO_PREFIX: "maurosoft1973"
        DOCKERHUB_REPO_NAME: "alpine-maxmind-geolite"
        DOCKERHUB_SHORT_DESCRIPTION: "MaxMind GeoLite running on Alpine Linux"
    rules:
      - if: '$TRIGGER_JOB == "job1"'
    script:
        - apk add --no-cache bash git openssh-client ca-certificates
        - git config --global user.email "mauro.cardillo@gmail.com"
        - git config --global user.name "Mauro Cardillo"
        - /bin/bash
        - mkdir -p ~/.ssh &&  chmod 700 ~/.ssh
        - echo -e "$GITLAB_SSH_KEY" > ~/.ssh/gitlab_ci_ed25519
        - chmod 600 ~/.ssh/gitlab_ci_ed25519
        - echo -e "Host gitlab.com\nHostName gitlab.com\nIdentityFile ~/.ssh/gitlab_ci_ed25519" > ~/.ssh/config
        - echo -e "Add host gitlab.com to known_hosts"
        - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
        - echo -e "Setting permission for ~/.ssh/known_hosts (chmod 644)"
        - chmod 644 ~/.ssh/known_hosts
        - git clone git@gitlab.com:maurosoft1973-docker/$DOCKERHUB_REPO_NAME.git /tmp/$DOCKERHUB_REPO_NAME
        - cd /tmp/$DOCKERHUB_REPO_NAME
        - LAST_UPDATE=$(date +"%d.%m.%Y %H:%M:%S")
        - rm -rf README_COMPILE.*
        - git add .
        - git commit -m "Update README"
        - git push -o ci.skip
        - FULL_DESCRIPTION=$(if [ -f "$(pwd)/README.md" ]; then cat "$(pwd)/README.md"; else echo ""; fi)
        - docker pull maurosoft1973/alpine-readme-to-dockerhub
        - docker run --rm -e DOCKERHUB_USERNAME="$DOCKERHUB_USERNAME" -e DOCKERHUB_PASSWORD="$DOCKERHUB_PASSWORD" -e DOCKERHUB_REPO_PREFIX="$DOCKERHUB_REPO_PREFIX" -e DOCKERHUB_REPO_NAME="$DOCKERHUB_REPO_NAME" -e SHORT_DESCRIPTION="$DOCKERHUB_SHORT_DESCRIPTION" -e FULL_DESCRIPTION="$FULL_DESCRIPTION" maurosoft1973/alpine-readme-to-dockerhub

amd64 test build:
    image: docker
    stage: Build e Push image
    rules:
      - if: '$TRIGGER_JOB == "job1"'
    variables:
        RELEASE: "TEST"
    script:
        - bash ./build-image.sh -av=$JOB_ALPINE_VERSION -avd=$JOB_ALPINE_VERSION_DATE -ar=$JOB_ALPINE_RELEASE -r=$RELEASE

amd64 current build:
    stage: Build e Push image
    variables:
        RELEASE: "CURRENT"
    rules:
      - if: '$TRIGGER_JOB == "job1"'
    script:
        - bash ./build-image.sh -av=$JOB_ALPINE_VERSION -avd=$JOB_ALPINE_VERSION_DATE -ar=$JOB_ALPINE_RELEASE -r=$RELEASE

amd64 latest build:
    stage: Build e Push image
    variables:
        RELEASE: "LATEST"
    rules:
      - if: '$TRIGGER_JOB == "job1"'
    script:
        - bash ./build-image.sh -av=$JOB_ALPINE_VERSION -avd=$JOB_ALPINE_VERSION_DATE -ar=$JOB_ALPINE_RELEASE -r=$RELEASE

